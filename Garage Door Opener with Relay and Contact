/**
 *  Garage Door Opener with Relay and Contact
 *
 *  Copyright 2015 George Chast
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (name: "Garage Door Controller with Relay and Contact", namespace: "gtc100gh", author: "George Chast") {
		capability "doorControl"
		capability "actuator"
        command "opened"
        command "closed"
	}
	tiles {
        standardTile("opener", "device.door", width: 2, height: 2, canChangeIcon: true) {
        	state("closed", label:'${name}', action:"open", icon:"st.doors.garage.garage-closed", backgroundColor:"#79b821")
            state("opened", label:'${name}', action:"close", icon:"st.doors.garage.garage-open", backgroundColor:"#ffa81e")			
		}
		main "opener"
		details(["opener"])
	}
}
def open() {																		// tile press action
	log.debug "--open action--------------------------"
	def x=device.currentValue("door")
	log.debug "Garage Door Virtual Button is currently $x"
	if (device.currentValue("door") != "open") {
		log.info "Sending open door event"
		sendEvent(name: "doorControl", value: "open", isStateChange: true, unit: "")
	}
	else {
		log.debug "Not opening door since it is already open"
	}
}
def close() {																		// tile press action
	log.debug "--close action--------------------------"
	def x=device.currentValue("door")
	log.debug "Garage Door Virtual Button is currently $x"
	if (device.currentValue("door") != "closed") {
		log.info "Sending close door event"
		sendEvent(name: "doorControl", value: "close", isStateChange: true, unit: "")
	}
	else {
		log.debug "Not closing door since it is already closed"
	}
}
def opened(){
	log.debug "--opened--------------------------"
    def result = sendEvent(name: "door", value: "opened")
}
def closed(){
	log.debug "--closed--------------------------"
    def result = sendEvent(name: "door", value: "closed")
}
def parse(String description) {
	log.debug "--parse--------------------------"
	log.debug "[description is: ${description}"
    if (${description}=="opened") {
	    def result = createEvent(name: "door", value: "opened")
    }else if (${description}=="closed"){
	    def result = createEvent(name: "door", value: "closed")
    }
	log.debug "Parse returned ${result?.descriptionText}"
}
